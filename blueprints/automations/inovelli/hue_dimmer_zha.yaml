blueprint:
  name: Hue Paddle Dimming + Scene Cycling (Unified ZHA Event with Sync)
  description: >
    üéØ All-in-one automation for Inovelli Blue switches (ZHA) and Hue Rooms/Zones

    ‚úÖ Paddle tap ‚Üí On/Off  
    ‚úÖ Paddle hold/release ‚Üí Smooth dimming  
    ‚úÖ Side button (button 3) ‚Üí Cycle Hue scenes (forward/backward)
    ‚úÖ Configurable off LED color
    ‚úÖ Light turned on ‚Üí (optional) activate default scene  
    ‚úÖ Sync switch and light state via derived input_boolean.sync_<room>  
    ‚úÖ Configurable brightness step (percent)

  domain: automation

  input:
    switch_device:
      name: Inovelli Switch (ZHA)
      selector:
        device:
          integration: zha

    switch_entity:
      name: Inovelli Switch Entity (the light entity of the switch)
      selector:
        entity:
          domain: light

    light_entity:
      name: Light Group (Hue Room or Zone)
      selector:
        entity:
          domain: light

    dimming_script:
      name: Dimming Script
      selector:
        entity:
          domain: script

    switch_led_off_color:
      name: Switch LED Off Color
      default: "24"
      selector:
        number:
          min: 0
          max: 255
          step: 1

    brightness_step:
      name: Brightness Step (%)
      default: 10
      selector:
        number:
          min: 1
          max: 50
          step: 1
          unit_of_measurement: "%"

    default_scene_enabled:
      name: Enable Default Scene
      default: false
      selector:
        boolean:

    default_scene:
      name: Default Scene
      default: ""
      selector:
        text:

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input switch_device

  - platform: state
    entity_id: !input light_entity
    from: "off"
    to: "on"
    id: light_on_trigger

  - platform: state
    entity_id: !input light_entity
    from: "on"
    to: "off"
    id: light_off_trigger

  - platform: state
    entity_id: !input switch_entity
    id: switch_state_change

  - platform: state 
    entity_id: !input light_entity
    id: light_state_change

variables:
  light_entity: !input light_entity
  switch_entity: !input switch_entity
  switch_device: !input switch_device
  switch_entity_name: >
    {{ device_entities(switch_device) 
       | select('search', 'default_all_led_off_intensity') 
       | list 
       | first 
       | replace('number.', '') 
       | replace('_default_all_led_off_intensity', '') }}
  room: "{{ light_entity.split('.')[1] }}"
  room_lower: "{{ room | lower }}"
  switch_led_off_color: !input switch_led_off_color
  dimmer_flag: "input_boolean.dimmer_{{ room_lower }}"
  sync_flag: "input_boolean.sync_{{ room_lower }}"
  scene_index: "input_number.scene_index_{{ room_lower }}"
  available_scenes: >
    {% set prefix = 'scene.' ~ room_lower ~ '_' %}
    {{ states.scene | map(attribute='entity_id') | select('search', prefix) | list | sort }}
  default_scene_enabled: !input default_scene_enabled
  default_scene: !input default_scene
  brightness_step: !input brightness_step
  command: "{{ trigger.event.data.command if trigger.platform == 'event' else '' }}"
  direction: >
    {% if 'button_1' in command %}Down
    {% elif 'button_2' in command %}Up
    {% else %}unknown{% endif %}
  is_hold: "{{ 'hold' in command }}"
  is_release: "{{ 'release' in command }}"
  is_button_1_press: "{{ command == 'button_1_press' }}"
  is_button_1_double: "{{ command == 'button_1_double' }}"
  is_button_2_press: "{{ command == 'button_2_press' }}"
  is_button_2_double: "{{ command == 'button_2_double' }}"
  is_button_3_press: "{{ command == 'button_3_press' }}"
  is_button_3_hold: "{{ command == 'button_3_hold' }}"
  is_button_3_double: "{{ command == 'button_3_double' }}"
  is_light_on_trigger: "{{ trigger.id == 'light_on_trigger' }}"
  is_light_off_trigger: "{{ trigger.id == 'light_off_trigger' }}"
  is_switch_state_change: "{{ trigger.id == 'switch_state_change' }}"
  is_light_state_change: "{{ trigger.id == 'light_state_change' }}"

action:
  - choose:
      - conditions: "{{ is_button_1_press }}"
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ sync_flag }}"

      - conditions: "{{ is_button_2_press }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ sync_flag }}"

      - conditions: "{{ is_button_1_double }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ sync_flag }}"
          - service: light.turn_on
            target:
              entity_id: "{{ light_entity }}"
            data:
              brightness_pct: 10
          - choose:
              - conditions: "{{ states(switch_entity) != 'on' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ switch_entity }}"

      - conditions: "{{ is_button_2_double }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ sync_flag }}"
          - service: light.turn_on
            target:
              entity_id: "{{ light_entity }}"
            data:
              brightness_pct: 100
          - choose:
              - conditions: "{{ states(switch_entity) != 'on' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ switch_entity }}"

      - conditions: "{{ is_hold and direction in ['Up', 'Down'] }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ dimmer_flag }}"
          - service: script.turn_on
            target:
              entity_id: !input dimming_script
            data:
              variables:
                room: "{{ room }}"
                direction: "{{ direction }}"
                brightness_step: "{{ brightness_step }}"

      - conditions: "{{ is_release }}"
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ dimmer_flag }}"

      # When sync_flag turns ON, set LED to match room color and brightness
      - conditions: "{{ is_light_on_trigger }}"
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ sync_flag }}"
          # Get color from light attributes
          - variables:
              room_color: >
                {% set s = states[light_entity] %}
                {% if 'hs_color' in s.attributes %}
                  # Map Hue value (0-360) directly to Inovelli range (0-255)
                  {{ (s.attributes.hs_color[0] / 360 * 255) | int }}
                {% else %}
                  # Default warm white
                  24
                {% endif %}
              led_intensity: "{{ ((states[light_entity].attributes.brightness | default(255) | float / 255) * 100) | round(0) | int }}"
          # Set LED color and intensity
          - service: number.set_value
            data:
              entity_id: "number.{{ switch_entity_name }}_default_all_led_on_color"
              value: "{{ room_color }}"
          - service: number.set_value
            data:
              entity_id: "number.{{ switch_entity_name }}_default_all_led_on_intensity"
              value: "{{ led_intensity }}"
          # Optionally activate default scene
          - choose:
              - conditions: "{{ default_scene_enabled and default_scene != '' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: "{{ default_scene }}"

      - conditions: "{{ is_light_off_trigger }}"
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ sync_flag }}"
          # Add LED off color settings  
          - service: number.set_value
            data:
              entity_id: "number.{{ switch_entity_name }}_default_all_led_off_color"
              value: "{{ switch_led_off_color }}"
          - service: number.set_value
            data:  
              entity_id: "number.{{ switch_entity_name }}_default_all_led_off_intensity" 
              value: 1

      - conditions: "{{ is_switch_state_change }}"
        sequence:
          - choose:
              - conditions: "{{ states(switch_entity) == 'on' }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ sync_flag }}"
              - conditions: "{{ states(switch_entity) == 'off' }}"
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ sync_flag }}"

      - conditions: "{{ is_button_3_press }}"
        sequence:
          - choose:
              - conditions: "{{ available_scenes | length == 0 }}"
                sequence:
                  - service: system_log.write
                    data:
                      level: error
                      message: "‚ùå No scenes found for '{{ room_lower }}'"
              - conditions: "{{ states(scene_index) == 'unknown' }}"
                sequence:
                  - service: system_log.write
                    data:
                      level: error
                      message: "‚ùå Missing input_number: {{ scene_index }}"
              - conditions: []
                sequence:
                  - variables:
                      current: "{{ states(scene_index) | int(0) }}"
                      next: "{{ (current + 1) % (available_scenes | length) }}"
                      next_scene: "{{ available_scenes[next] }}"
                  - service: input_number.set_value
                    data:
                      entity_id: "{{ scene_index }}"
                      value: "{{ next }}"
                  - service: scene.turn_on
                    target:
                      entity_id: "{{ next_scene }}"

      - conditions: "{{ is_button_3_hold }}"
        sequence:
          - choose:
              - conditions: "{{ available_scenes | length == 0 }}"
                sequence:
                  - service: system_log.write
                    data:
                      level: error
                      message: "‚ùå No scenes found for '{{ room_lower }}'"
              - conditions: "{{ states(scene_index) == 'unknown' }}"
                sequence:
                  - service: system_log.write
                    data:
                      level: error
                      message: "‚ùå Missing input_number: {{ scene_index }}"
              - conditions: []
                sequence:
                  - variables:
                      current: "{{ states(scene_index) | int(0) }}"
                      prev: "{{ (current - 1) % (available_scenes | length) }}"
                      prev_scene: "{{ available_scenes[prev] }}"
                  - service: input_number.set_value
                    data:
                      entity_id: "{{ scene_index }}"
                      value: "{{ prev }}"
                  - service: scene.turn_on
                    target:
                      entity_id: "{{ prev_scene }}"

      - conditions: "{{ is_light_state_change and states(light_entity) == 'on' }}"
        sequence:
          - variables:
              room_color: >
                {% set s = states[light_entity] %}
                {% if 'hs_color' in s.attributes %}
                  {{ (s.attributes.hs_color[0] / 360 * 255) | int }}
                {% else %}
                  24
                {% endif %}
              led_intensity: >
                {% set s = states[light_entity] %}
                {{ ((s.attributes.brightness | default(255)) / 255 * 100) | int }}
          - service: number.set_value
            target:
              entity_id: "number.{{ switch_entity_name }}_default_all_led_on_color"
            data:
              value: "{{ room_color }}"
          - service: number.set_value
            target:
              entity_id: "number.{{ switch_entity_name }}_default_all_led_on_intensity"
            data:
              value: "{{ led_intensity }}"

  - choose:
      - conditions: "{{ states(sync_flag) == 'on' }}"
        sequence:
          - choose:
              - conditions: "{{ states(light_entity) != 'on' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ light_entity }}"
          - choose:
              - conditions: "{{ states(switch_entity) != 'on' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ switch_entity }}"

      - conditions: "{{ states(sync_flag) == 'off' }}"
        sequence:
          - choose:
              - conditions: "{{ states(light_entity) != 'off' }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: "{{ light_entity }}"
          - choose:
              - conditions: "{{ states(switch_entity) != 'off' }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: "{{ switch_entity }}"

mode: restart
